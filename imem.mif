-- null
DEPTH = 4096;
WIDTH = 32;

ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;

CONTENT
BEGIN
    -- nop
0000 : 00000000000000000000000000000000;
    -- addi $1, $1, 1          # r1 = 1
0001 : 00101000010000100000000000000001;
    -- sll $1, $1, 15			# r1 = 32768
0002 : 00000000010000100000011110010000;
    -- addi $1, $1, 32767		# r1 = 65535
0003 : 00101000010000100111111111111111;
    -- addi $1, $1, 1			# r1 = 65536
0004 : 00101000010000100000000000000001;
    -- sra $1, $1, 5           # r1 = 2048
0005 : 00000000010000100000001010010100;
    -- add $1, $1, $1			# r1 = 4096
0006 : 00000000010000100001000000000000;
    -- addi $1, $0, 1          # r1 = 1
0007 : 00101000010000000000000000000001;
    -- sll $2, $1, 31          # r2 = -2147483648
0008 : 00000000100000100000111110010000;
    -- addi $3, $0, -1         # r3 = -1
0009 : 00101000110000011111111111111111;
    -- add $4, $2, $3          # r4 overflow to 2147483647, r30 should be 1
0010 : 00000001000001000011000000000000;
    -- addi $5, $2, -1         # r5 overflow to 2147483647, r30 should be 2
0011 : 00101001010001011111111111111111;
    -- sub $6, $2, $1          # r6 overflow to 2147483647, r30 should be 3
0012 : 00000001100001000001000000000100;
    -- addi $1, $0, 65535      # r1 = 65535 = 0x0000FFFF
0013 : 00101000010000001111111111111111;
    -- sll $2, $1, 15			# r2 = r1 << 15 = 0x7FFF8000 = 2147450880(decimal)
0014 : 00000000100000100000011110010000;
    -- addi $3, $2, 32767		# r3 = r2 + 32767 = 0x7FFF8000 + 0x00007FFF = 0x7FFFFFFF(hex) = 2147483647(decimal)
0015 : 00101000110001000111111111111111;
    -- addi $4, $0, 1			# r4 = 1
0016 : 00101001000000000000000000000001;
    -- add $6, $1, $4			# r6 = 65535 + 1 = 65536  (normal addition) (then how about overflow addition?)
0017 : 00000001100000100100000000000000;
    -- sll $5, $4, 31			# r5 = r4 << 31 = 0x80000000(hex) = -2147483648(decimal)
0018 : 00000001010010000000111110010000;
    -- sub $6, $1, $4			# r6 = r1 - r4 = 65535 - 1 = 65534 (normal sub) (then how about overflow sub?)
0019 : 00000001100000100100000000000100;
    -- and $5, $1, $2			# r5 = r1 & r2 = 0x0000FFFF & 0x7FFF8000 = 0x00008000(hex) = 32768(decimal)
0020 : 00000001010000100010000000001000;
    -- or $6, $1, $2			# r6 = r1 | r2 = 0x0000FFFF | 0x7FFF8000 = 0x7FFFFFFF(hex) = 2147483647(decimal)
0021 : 00000001100000100010000000001100;
    -- addi $1, $0, 2          # r1 = 2
0022 : 00101000010000000000000000000010;
    -- add $2, $4, $1          # r2 = 3
0023 : 00000000100010000001000000000000;
    -- sub $3, $1, $4          # r3 = 1
0024 : 00000000110000100100000000000100;
    -- and $4, $3, $2          # r4 = 1 & 3 = 1
0025 : 00000001000001100010000000001000;
    -- or $5, $1, $4           # r5 = 2 | 1 = 3
0026 : 00000001010000100100000000001100;
    -- sll $6, $4,1            # r6 = 1 << 1 = 2
0027 : 00000001100010000000000010010000;
    -- sra $6, $6,1            # r6 = 2 >> 1 = 1 
0028 : 00000001100011000000000010010100;
    -- sw $4, 1($0)			# store 1 into address 1
0029 : 00111001000000000000000000000001;
    -- sw $1, 2($0)			# store 2 into address 2
0030 : 00111000010000000000000000000010;
    -- addi $2, $0, 456		# r2 = 456 
0031 : 00101000100000000000000111001000;
    -- sw $5, 0($2)			# store 3 into address 456
0032 : 00111001010001000000000000000000;
    -- lw $6, 1($0)			# load 1 from address 1 into r6
0033 : 01000001100000000000000000000001;
    -- lw $6, 0($2)			# load 3 from address 456 into r6
0034 : 01000001100001000000000000000000;
    -- lw $6, 2($0)			# load 2 from address 2 into r6
0035 : 01000001100000000000000000000010;
[0036 .. 4095] : 00000000000000000000000000000000;
END;
